How to Install and Use the UV Python Package Manager
Install UV
Open PowerShell in Administrator mode and run the following command to install the latest version of UV:
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
To install a specific version of UV (e.g., version 0.7.9), use:
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/0.7.9/install.ps1 | iex"
Verify Installation
After installation, verify UV is installed by running:
uv
You should see a help menu with the available commands.
Create a Virtual Environment
To create a new virtual environment named 'my_env' under C:\uday_envs (where all python envs for uday resides) , run:
cd C:\uday_envs
uv venv my_env  
Eg: uv venv uday_U01 --python 3.11
Activate the Virtual Environment
To activate the environment, use:
.\my_env\Scripts\Activate.ps1
Deactivate the Virtual Environment
To deactivate the virtual environment, use:
How to Install and Use the UV Python Package Manager
deactivate
Install the Latest Python Version
To install Python 3.12 using UV, run:
uv python install 3.12
Install Individual Packages
To install a package like 'ruff', use:
uv pip install ruff
Install from a Requirements File
To install packages from a requirements.txt file, use:
uv pip install -r requirements.txt















step 1: Install python 3.12.4 (https://www.python.org/ftp/python/3.12.4/python-3.12.4-amd64.exe)
Step 2: Add python path to system environment variables (generally : C:\Program Files\Python312\) AND also add http_proxy and https_proxy values.
step 3: Goto project directory 
step 4: Create environment by running the command in VScode new PS terminal: python -m venv .venv
step 5: Activate environment by running the command:.venv\Scripts\Activate.ps1
step 6: upgrade PIP by running the command: python -m pip install --upgrade pip
step 7: install packages from requirement.txt file : pip install -r requirements.txt
step 8: run this command to enable pytorch package download: pip config set global.trusted-host "pypi.org files.pythonhosted.org pypi.python.org download.pytorch.org" --trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org --trusted-host=download.pytorch.org
step 9: install pytorch packages from torch_requirement.txt file : pip install -r torch_requirements.txt

Step 10 Make sure we have .venv before the directory as in below image or use python interpreter to select the new environment as we do for conda.



step 11 run cuda_check.py, it should return true if the libraries are installed successfully. False, if not installed successfully. 

Requirement.txt and torch_requirements.txt file added to Github repo : https://github.hpe.com/hpe/uday-embed/blob/main/embed_proj_files_for_git/requirements.txt

sentence-transformers==3.0.0
langchain==0.2.16
langchain-community==0.2.16
langchain-postgres==0.0.6
psycopg-binary==3.1.19
psycopg-pool==3.2.2
psycopg==3.1.19
unstructured==0.15.12
unstructured-client==0.25.9
unstructured-inference==0.7.36
unstructured-pytesseract==0.3.13
pi-heif==0.18.0
onnx==1.16.2
onnxruntime==1.19.2
onnxscript==0.1.0.dev20241217
openai==1.30.3

pymupdf==1.25.5
pandas==2.2.3
pyodbc==5.2.0
numpy==1.26.3
httpx==0.27.0
pdfminer.six==20231228
jupyterlab==4.3.3

-i https://download.pytorch.org/whl/cu121
torch==2.5.1+cu121
torchaudio==2.5.1+cu121
torchvision==0.20.1+cu121



#############START ############################################################
https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
Version 16.3 Windowsx86-64
Include PGAdmin4 and Application Stack Builder
NOTE the password you used



Password used ((superuser)postgres - udayadmin2024)
Installed PGagent
PORT: 5432 - default port.
 
PGVector
-----------
From https://github.com/pgvector/pgvector
 
PGVector is a Postgres extension. It's compiled from source -
To do this
Ensure C++ support in Visual Studio is installed, and run:
call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
Note: The exact path will vary depending on your Visual Studio version and edition
 
Then use nmake to build: (These steps worked fine for me)
set "PGROOT=C:\Program Files\PostgreSQL\16"
cd %TEMP%
git clone --branch v0.7.1 https://github.com/pgvector/pgvector.git
cd pgvector
nmake /F Makefile.win
nmake /F Makefile.win install
 
 
Now make a database in postgress, use pgAdmin, the GUI makes this very easy.
1. Create database- *vectordb*


2.Start a query window in the database
Enable the extension (do this once in each database where you want to use it)
in the query windows type:
create extension vector;


and execute the query, you should note in the output window a success message
 
Creating a vector collection
---------------------------
To make things simple use langchain
To make an empty collection in python, execute
vec_conn = 'postgresql+psycopg://postgres:<password>@localhost:5432/vectordb'
collection_name='commonSiXml'
 
vector_store = PGVector(
embeddings=local_embeddings,
collection_name=collection_name,
connection=vec_conn,
use_jsonb=True,
)
 
Enable the vector index HNSW
 
From this point just use langchain as you would with any other vector database
############# END ############################################################






Anaconda Environment Setup.

step 1 : install anaconda from below URL : 
https://www.anaconda.com/download/success

Step 2: Open .Condarc file update proxy settings
 proxy_servers:
    http: http://0.0.0.0:8080
    https: http://0.0.0.0:8080

Step 3: Update proxy settings at system level in envrionemnet variables.
    http_proxy: http://0.0.0.0:8080
    https_proxy: http://0.0.0.0:8080

step 4: set ssl_verify to false in .condarc file and update the channels in the .condarc file
channels:
  - pytorch
  - nvidia
  - conda-forge
  - nodefaults

step 5 : create the environmnet using below command 
 conda create --name "lab03" -c conda-forge python=3.11.10 --override-channels

step 6: Make sure the ***-env.yml file has necessary channels and nodefaults in place.

step 7: Use below step to update the environmnet with necessary packages.
 conda env update --file=lab03-env.yml --prune -n labsrv03

 conda env update --file=uday_Agent_env.yml --prune -n labrat01



 Ollama Setup

1. netsh winhttp show proxy
 if the proxy shows : http://0.0.0.0:8080 then it would work fine.
2. if no proxy is set use below command to set the proxy

 a.netsh winhttp set proxy "http://0.0.0.0:8080" bypass-list= "10.*.*.*;127.0.0.1;localhost;"
    (or)
 b.$proxy = New-Object System.Net.WebProxy("http://0.0.0.0:8080")
   [System.Net.WebRequest]::DefaultWebProxy = $proxy

3. Restart the server !Important

4.Run below command
    ollama run llama3.2

Additional Commands:


netsh winhttp show proxy

set environmnet variables
$env:HTTP_PROXY = "http://0.0.0.0:8080"

$env:HTTPS_PROXY = "http://0.0.0.0:8080"

  Proxy Server(s) :  http://10.0.0.0.0:8080
    Bypass List     :  10.*.*.*;127.0.0.1;localhost;
